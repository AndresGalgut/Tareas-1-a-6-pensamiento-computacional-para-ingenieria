# -*- coding: utf-8 -*-
"""Tarea 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r94fphbn447QcKDS6uHGF1Cj9S8WVWjp
"""

#Numero para el largo de la lista
while True:
  n = int(input("introdcue un numero entero n (>0) para el largo de las listas:"))
  if n > 0:
    break
  else:
    print("El numero debe ser mayor a 0")
#Valores de la lista
L1 = []
for i in range(n):
  num = int(input(f"introduce el entero {i+1}: "))
  L1.append(num)
print(f"L1={L1}")
L2 = []
for i in range(n):
  num = int(input(f"introduce el entero {i+1}: "))
  L2.append(num)
print(f"L2= {L2}")

#Suma de cada valor dentro de las listas
LSUMA = [L1[i] + L2[i] for i in range(n)]
print(f"La suma de las listas es {LSUMA}")

LORDENADA = sorted(L1 + L2)

print(f"La lista ordenada es {LORDENADA}")

#Metodo 1
LUNICA1 = []
for num in LORDENADA:
  if num not in LUNICA1:
    LUNICA1.append(num)
print(f"La lista unica es {LUNICA1}")

#Metodo 2
LUNICA2 = set(LORDENADA)
print(f"La lista unica es {LUNICA2}")
#

#1
#Numero para el largo de la lista
while True:
  n = int(input("introdcue un numero entero n (>0):"))
  if n > 0:
    break
  else:
    print("El numero debe ser mayor a 0")
#Valores de la lista
lista = []
for i in range(n):
  num = int(input(f"introduce el entero {i+1}: "))
  lista.append(num)
print(lista)
#Indice Creciente
for i in range (n):
  print(f"lista [{i}] = {lista[i]}")
#Indice decreciente
for k in range (1, n+1):
  print(f"lista [-{k}] = {lista[-k]}")
#Promedio
Prom = sum(lista)/n
print(f"El promedio es {Prom}")
#Lista al cuadrado
CUADRADOS = [num**2 for num in lista]
print(f"La lista al cuadrado es {CUADRADOS}")
#Contar Pares e impares
PARES = sum(1 for num in lista if num % 2 == 0)
print(f"Hay {PARES} pares " )
IMPARES = n-PARES
print(f"Hay {IMPARES} impares")
#Lista en orden
lista.sort()
print(f"La lista en orden es {lista}")

#Se crea la funcion digitos faltantes
def digitos_faltantes():
  while True:
    t = int(input("introdcue un numero entero t (>0 y <10) para el largo de la lista:"))
    if t >= 0 and t <=10:
      break
    else:
      print("El numero debe ser positivo y menor que 10")
    #le pide al usuario un numero del 1 al 10
  lista = []
  #se crea una lista vacia para almacenar los datos después
  for i in range(t):
    while True:
      num = int(input(f"introduce el entero {i+1} (1-9): "))
      if num > 0 and num < 10:
        break
      else:
        print("El numero debe ser positivo y menor que 10")
    lista.append(num)
    #esta parte le pide al usuario los valores para la lista

  print(f"Lista={lista}")
  lista10 = [1,2,3,4,5,6,7,8,9]
  numfaltantes = []
  for k in lista10:
    if k not in lista:
      numfaltantes.append(k)
  print (f"Los numeros que faltan son {numfaltantes}")
  #Se crea una lista del 1 al 10 en la cual se eliminarán los numeros que el usuario agregó a su lista, por lo que se retornarán solo los que faltan


# Se crea la función fibonacci
def fibonacci():
  while True:
    n = int(input("introdcue un numero entero (n>=0):"))
    if n >= 0:
      break
    else:
      print("El numero debe ser mayor a 0")
  fibo = []
  a, b = 0, 1

  for j in range(n):
    fibo.append(a)
    a, b = b, a + b

    print(f"La lista de fibonacci es {fibo}")

while True:
  print("1 Digitos Faltantes (1-9)")
  print("2 Fibonacci en lista")
  print("3 Salir")

  opcion = int(input("ingrese una opcion: "))

  if opcion == 1:
    digitos_faltantes()

  elif opcion == 2:
    fibonacci()

  elif opcion == 3:
    break

  else:
    print("Elija una opción válida")

#esta parte manda a llamar todas las funciones creadas previamente en un menú para el usuario