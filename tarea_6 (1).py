# -*- coding: utf-8 -*-
"""Tarea 6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iXG5LwpFMf7for9_RNSy8CfzPNpb0OzJ
"""

#Exercise 1:

import sys

#Define la funcion llamada calcular_determinante, la cual necesita necesita una matriz, que es una lista de listas, y retornará un entero
def calcular_determinante(matriz: list[list[int]]) -> int:
    producto_ad = matriz[0][0] * matriz[1][1]
    producto_cb = matriz[1][0] * matriz[0][1]
    #Está almacenando las multiplicaciones de las matrices en variables llamadas producto
    return producto_ad - producto_cb

#Define la funcion para construir una matriz cuadrada de 2x2
def construir_matriz() -> list[list[int]] | None:
    print("Ingrese los valores para la primera fila (2 valores, separados por espacios):")
    fila1 = [int(val) for val in input().split()]
#Usa la funcion split y le dice al usuario que ingrese los dos valores separados por espacios
    print("Ingrese los valores para la segunda fila (2 valores, separados por espacios):")
    fila2 = [int(val) for val in input().split()]

#Usa una condicional para cuando el usuario esté creando la matriz, si esta no es cuadrada, no va a retornar nada
    if len(fila1) != 2 or len(fila2) != 2:
        print("Matrix is not a 2x2 matrix.")
        return None

    return [fila1, fila2]

#Define la funcion principal, la cual junta las otras dos funciones, retornandole un resultado al usuario (usa el nombre main como ejemplo si estuvieramos usando c++)
def principal():
    print("--- Calculadora del Determinante de una matriz 2x2 ---")

    matriz = construir_matriz()

    if matriz is not None:
        determinante = calcular_determinante(matriz)

        print(f"\nEl determinante de la matriz {matriz} es: {determinante}")
    else:
        pass

if __name__ == "__main__":
    principal()

#Exercise 2:

import sys

#Define la funcion es_primo, que estára usando el argumento de n que es un entero, y estraá retornando un booleano
def es_primo(n: int) -> bool:
  #está haciendo la condicional para determinar si es un primo o no
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
  #Aqui hace uso de una formula para determinar si un numero es primo o no lo es
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

#Aqui cuenta los primos por fila, al final juntandolo todo en una lista que guarda la sumatoria de todos los numeros primos que hay en la matriz
def contar_primos_por_fila(matriz: list[list[int]]) -> list[int]:
    #Crea una lista vacia para almacenar los numeros primos (o en este caso, la cantidad de numeros primos que hay)
    conteo_primos = []

    #Por cada lista o fila dentro de la matriz
    for fila in matriz:
        conteo_fila = 0
        # Por cada numero dentro de cada lista dentro de la matriz
        for numero in fila:
            if es_primo(numero):
                conteo_fila += 1
        #La primera condicional no seguira hasta que la condicional adentro termine su proceso

        #Añade la sumatoria de la cantidad de numeros primos a la lista de conteo_primos
        conteo_primos.append(conteo_fila)

    return conteo_primos

#Define la funcion principal, la cual le pedirá al usuario los valores para crear nuestra matriz
def principal():
    print(">>> ", end="")
    #le pide al usuario el numero de filas y de columnas que llevará su matriz
    num_filas = int(input("Ingrese el número de filas de la matriz: "))

    print(">>> ", end="")
    num_columnas = int(input("Ingrese el número de columnas de la matriz: "))

    #Crea una condicional para que la matriz salga sin errores (pues los numeros deben de ser positivos)
    if num_filas <= 0 or num_columnas <= 0:
        print("Error: El número de filas y columnas debe ser positivo.")
        return
#le pide al usuario que ingrese cada valor de la matriz
    print("\n--- Ingrese los datos de la matriz (un entero por línea) ---")
    matriz = []

    for i in range(num_filas):
        fila = []
        print(f"Fila {i+1}:")
        for j in range(num_columnas):
            print(">>> ", end="")
            valor = int(input())
            fila.append(valor)
        matriz.append(fila)

#Manda a llamar a la otra función que cuenta los primos por cada fila
    resultado = contar_primos_por_fila(matriz)
   #Imprime todos los resultados para el usuario
    print("\n--- Matriz Leída ---")
    for fila in matriz:
        print(fila)

    print("\n--- Salida ---")
    print(f"Lista de cantidad de primos por fila: {resultado}")

#De nuevo hace uso del ejemplo de como sería en c++
if __name__ == "__main__":
    principal()